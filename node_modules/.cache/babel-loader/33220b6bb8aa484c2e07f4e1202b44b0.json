{"ast":null,"code":"var _jsxFileName = \"/Applications/Project/practice-react-query/src/components/DynamicParallelQueriesPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useQueries } from \"react-query\";\nimport { toast } from \"react-toastify\";\nimport { useStudentsData } from \"./../hooks/useStudentsData\";\nimport { fetchStudent } from \"./../api/studentAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DynamicParallelQueriesPage() {\n  _s();\n\n  const [studentIds, setStudentIds] = useState([]);\n\n  const onSuccess = data => {\n    toast.success(\"called data students success\", {\n      autoClose: 1000\n    });\n  };\n\n  const onError = error => {\n    toast.error(error.message, {\n      autoClose: 2000\n    });\n  };\n\n  const {\n    data: students\n  } = useStudentsData(onSuccess, onError); // trả về 1 mảng các object.\n\n  const queryResults = useQueries(studentIds.map(id => ({\n    queryKey: [\"students\", id],\n    queryFn: () => fetchStudent(id)\n  })));\n  useEffect(() => {\n    if (students) {\n      const studentIDs = students.data.map(student => student.id);\n      setStudentIds(studentIDs);\n    }\n  }, [students]);\n  console.log(queryResults);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Dynamic Parallel Queries Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: queryResults.map(_ref => {\n        let {\n          data\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: data === null || data === void 0 ? void 0 : data.data.name\n        }, data === null || data === void 0 ? void 0 : data.data.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DynamicParallelQueriesPage, \"cx0PkwIeCfGJFX4oYrbib5UTk3g=\", false, function () {\n  return [useStudentsData, useQueries];\n});\n\n_c = DynamicParallelQueriesPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DynamicParallelQueriesPage\");","map":{"version":3,"names":["Fragment","useEffect","useState","useQueries","toast","useStudentsData","fetchStudent","DynamicParallelQueriesPage","studentIds","setStudentIds","onSuccess","data","success","autoClose","onError","error","message","students","queryResults","map","id","queryKey","queryFn","studentIDs","student","console","log","name"],"sources":["/Applications/Project/practice-react-query/src/components/DynamicParallelQueriesPage.jsx"],"sourcesContent":["import { Fragment } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useQueries } from \"react-query\";\nimport { toast } from \"react-toastify\";\nimport { useStudentsData } from \"./../hooks/useStudentsData\";\nimport { fetchStudent } from \"./../api/studentAPI\";\n\nexport default function DynamicParallelQueriesPage() {\n  const [studentIds, setStudentIds] = useState([]);\n\n  const onSuccess = (data) => {\n    toast.success(\"called data students success\", { autoClose: 1000 });\n  };\n\n  const onError = (error) => {\n    toast.error(error.message, { autoClose: 2000 });\n  };\n\n  const { data: students } = useStudentsData(onSuccess, onError);\n\n  // trả về 1 mảng các object.\n  const queryResults = useQueries(\n    studentIds.map((id) => ({\n      queryKey: [\"students\", id],\n      queryFn: () => fetchStudent(id),\n    }))\n  );\n\n  useEffect(() => {\n    if (students) {\n      const studentIDs = students.data.map((student) => student.id);\n      setStudentIds(studentIDs);\n    }\n  }, [students]);\n\n  console.log(queryResults);\n\n  return (\n    <div>\n      <h4>Dynamic Parallel Queries Page</h4>\n      <ul>\n        {queryResults.map(({ data }) => (\n          <li key={data?.data.id}>{data?.data.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAEA,eAAe,SAASC,0BAAT,GAAsC;EAAA;;EACnD,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;;EAEA,MAAMQ,SAAS,GAAIC,IAAD,IAAU;IAC1BP,KAAK,CAACQ,OAAN,CAAc,8BAAd,EAA8C;MAAEC,SAAS,EAAE;IAAb,CAA9C;EACD,CAFD;;EAIA,MAAMC,OAAO,GAAIC,KAAD,IAAW;IACzBX,KAAK,CAACW,KAAN,CAAYA,KAAK,CAACC,OAAlB,EAA2B;MAAEH,SAAS,EAAE;IAAb,CAA3B;EACD,CAFD;;EAIA,MAAM;IAAEF,IAAI,EAAEM;EAAR,IAAqBZ,eAAe,CAACK,SAAD,EAAYI,OAAZ,CAA1C,CAXmD,CAanD;;EACA,MAAMI,YAAY,GAAGf,UAAU,CAC7BK,UAAU,CAACW,GAAX,CAAgBC,EAAD,KAAS;IACtBC,QAAQ,EAAE,CAAC,UAAD,EAAaD,EAAb,CADY;IAEtBE,OAAO,EAAE,MAAMhB,YAAY,CAACc,EAAD;EAFL,CAAT,CAAf,CAD6B,CAA/B;EAOAnB,SAAS,CAAC,MAAM;IACd,IAAIgB,QAAJ,EAAc;MACZ,MAAMM,UAAU,GAAGN,QAAQ,CAACN,IAAT,CAAcQ,GAAd,CAAmBK,OAAD,IAAaA,OAAO,CAACJ,EAAvC,CAAnB;MACAX,aAAa,CAACc,UAAD,CAAb;IACD;EACF,CALQ,EAKN,CAACN,QAAD,CALM,CAAT;EAOAQ,OAAO,CAACC,GAAR,CAAYR,YAAZ;EAEA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UACGA,YAAY,CAACC,GAAb,CAAiB;QAAA,IAAC;UAAER;QAAF,CAAD;QAAA,oBAChB;UAAA,UAAyBA,IAAzB,aAAyBA,IAAzB,uBAAyBA,IAAI,CAAEA,IAAN,CAAWgB;QAApC,GAAShB,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEA,IAAN,CAAWS,EAApB;UAAA;UAAA;UAAA;QAAA,QADgB;MAAA,CAAjB;IADH;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GAxCuBb,0B;UAWKF,e,EAGNF,U;;;KAdCI,0B"},"metadata":{},"sourceType":"module"}